//package com.app.backend.service;
//
//import com.app.backend.entity.AuthProvider;
//import com.app.backend.entity.Role;
//import com.app.backend.entity.User;
//import com.app.backend.repository.RoleRepository;
//import com.app.backend.repository.UserRepository;
//import com.app.backend.service.JwtService;
//import jakarta.servlet.ServletException;
//import jakarta.servlet.http.HttpServletRequest;
//import jakarta.servlet.http.HttpServletResponse;
//import lombok.RequiredArgsConstructor;
//import org.springframework.security.core.Authentication;
//import org.springframework.security.oauth2.core.user.OAuth2User;
//import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
//import org.springframework.stereotype.Component;
//
//import java.io.IOException;
//import java.util.Optional;
//
////@Component
//@RequiredArgsConstructor
//public class OAuth2SuccessHandler implements AuthenticationSuccessHandler {
//
//    private final UserRepository userRepository;
//    private final JwtService jwtService;
//    private final RoleRepository roleRepository;
//
//    @Override
//    public void onAuthenticationSuccess(HttpServletRequest request,
//                                        HttpServletResponse response,
//                                        Authentication authentication) throws IOException, ServletException {
//
//        OAuth2User oAuth2User = (OAuth2User) authentication.getPrincipal();
//
//        String email = oAuth2User.getAttribute("email");
//        String name = oAuth2User.getAttribute("name");
//
//        Optional<User> optionalUser = userRepository.findByEmail(email);
//
//        User user = optionalUser.orElseGet(() -> {
//            Role defaultRole = roleRepository.findByName("STUDENT")  // ✅ Fetch role by name
//                    .orElseThrow(() -> new RuntimeException("Default role not found"));
//
//            User newUser = new User();
//            newUser.setEmail(email);
//            newUser.setFullName(name);
//            newUser.setEnabled(true);
//            newUser.setProvider(AuthProvider.GOOGLE); // GOOGLE provider
//            newUser.setRole(defaultRole);             // ✅ Set default role
//
//            return userRepository.save(newUser);
//        });
//
//        String jwt = jwtService.generateToken(user.getEmail());
//
//        // ✅ Return JWT as JSON
//        response.setContentType("application/json");
//        response.setCharacterEncoding("UTF-8");
//        response.getWriter().write("{\"token\": \"" + jwt + "\"}");
//    }
//}
